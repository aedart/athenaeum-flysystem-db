#!/usr/bin/env php
<?php

/*****************************************************************
 * SQL schema generator
 *
 * Helper is used to generate schemas for each supported database
 * driver.
 ****************************************************************/

require_once "vendor/autoload.php";

// Load the composer autoloader
if (file_exists(__DIR__ . '/../../../../vendor/autoload.php')) {
    require __DIR__ . '/../../../../vendor/autoload.php';
} else {
    require __DIR__ . '/../../../autoload.php';
}

use Aedart\Container\IoC;
use Illuminate\Database\Capsule\Manager;
use Illuminate\Database\Migrations\Migration;

// Create Service Container instance
$container = IoC::getInstance();
$container->registerAsApplication();

// Setup connection manager
$capsule = new Manager($container);

// Define supported connections (from Laravel's config/database.php)
$supported = [
//    'sqlite' => [
//        'driver' => 'sqlite',
//        'url' => env('DATABASE_URL'),
//        'database' => env('DB_DATABASE', database_path('database.sqlite')),
//        'prefix' => '',
//        'foreign_key_constraints' => env('DB_FOREIGN_KEYS', true),
//    ],

    'sqlite_memory' => [
        'driver' => 'sqlite',
        'database' => ':memory:',
        'foreign_key_constraints' => env('DB_FOREIGN_KEYS', true),
    ],

    'mysql' => [
        'driver' => 'mysql',
        'url' => env('DATABASE_URL'),
        'host' => env('DB_HOST', '127.0.0.1'),
        'port' => env('DB_PORT', '3306'),
        'database' => env('DB_DATABASE', 'forge'),
        'username' => env('DB_USERNAME', 'forge'),
        'password' => env('DB_PASSWORD', ''),
        'unix_socket' => env('DB_SOCKET', ''),
        'charset' => 'utf8mb4',
        'collation' => 'utf8mb4_unicode_ci',
        'prefix' => '',
        'prefix_indexes' => true,
        'strict' => true,
        'engine' => null,
        'options' => extension_loaded('pdo_mysql') ? array_filter([
            \PDO::MYSQL_ATTR_SSL_CA => env('MYSQL_ATTR_SSL_CA'),
        ]) : [],
    ],

    'pgsql' => [
        'driver' => 'pgsql',
        'url' => env('DATABASE_URL'),
        'host' => env('DB_HOST', '127.0.0.1'),
        'port' => env('DB_PORT', '5432'),
        'database' => env('DB_DATABASE', 'forge'),
        'username' => env('DB_USERNAME', 'forge'),
        'password' => env('DB_PASSWORD', ''),
        'charset' => 'utf8',
        'prefix' => '',
        'prefix_indexes' => true,
        'schema' => 'public',
        'sslmode' => 'prefer',
    ],

    'sqlsrv' => [
        'driver' => 'sqlsrv',
        'url' => env('DATABASE_URL'),
        'host' => env('DB_HOST', 'localhost'),
        'port' => env('DB_PORT', '1433'),
        'database' => env('DB_DATABASE', 'forge'),
        'username' => env('DB_USERNAME', 'forge'),
        'password' => env('DB_PASSWORD', ''),
        'charset' => 'utf8',
        'prefix' => '',
        'prefix_indexes' => true,
    ],
];

// Add connection to the manager
foreach ($supported as $name => $config) {
    $capsule->addConnection($config, $name);
}
//$capsule->setAsGlobal();

/*****************************************************************
 * Output SQL for each available driver
 ****************************************************************/

// Obtain migration class
$migrationClass = require __DIR__ . '/migrations/2022_05_04_071658_create_files_table.php';
/** @var Migration $migration */
$migration = new $migrationClass();

// Output SQL for each driver
$drivers = array_keys($supported);
foreach ($drivers as $driver) {

    // Set or overwrite the schema builder in the service container
    $container->singleton('db.schema', function() use($capsule, $driver) {
        return $capsule->getConnection($driver)->getSchemaBuilder();
    });

    // Get connection and "pretend" to run the migration
    $connection = $capsule->getConnection($driver);
    $queries = $connection->pretend(function() use($migration) {
        $migration->up();
    });

    // Finally, output
    echo str_repeat('- ', exec('tput cols') / 2) . PHP_EOL;
    echo "Driver: ${driver}" . PHP_EOL;
    echo str_repeat('- ', exec('tput cols') / 2) . PHP_EOL;
    foreach ($queries as $operation) {
        echo $operation['query'] . PHP_EOL;

        if (!empty($operation['bindings'])) {
            echo 'Bindings: ';
            print_r($operation['bindings']) . PHP_EOL;
        }

        echo PHP_EOL;
    }
}
